#pragma once

#include <unistd.h>
#include <dirent.h>
#include <string.h>

#include "general.h"

#include "panel.h"
#include "app.h"

#include "keyboard_manager.h"

Buffer<Suggestion> openFilePanelGenerateSuggestions(GapBuffer* buffer){
    // TODO(Sarmis) this is an allocation party
    // reusing buffers would've been much better
    Buffer<Suggestion> result = {};

    char* filename = gapToString(buffer);

    String filenameString = cloneString(filename);
    String directoryString = cloneString(".");
    String fullpathString = filenameString;

    u32 lastSlash = characterLastOccurence(filenameString, '/');
    if(lastSlash){
        ++lastSlash;
        directoryString = subString(filenameString, 0, lastSlash);
        filenameString = subString(filenameString, lastSlash + 1, filenameString.size);
        fullpathString = directoryString + "/" + filenameString;
    }

    DIR* directory = opendir((char*)directoryString.data);
    if (directory) {
        struct dirent* directoryEntry;
        while ((directoryEntry = readdir(directory)) != NULL) {
            if(stringIsPartiallyMatching(filenameString, directoryEntry->d_name)){
                
                if(strlen(directoryEntry->d_name) > 48){
                    directoryEntry->d_name[12] = 0;
                }

                String clone = cloneString(directoryEntry->d_name);
                
                Suggestion s = {};
                s.name = clone;
                s.score = 0;
                
                bufferAppend<Suggestion>(&result, s);
            }
        }
        closedir(directory);
    }

    if(filenameString.data != fullpathString.data){
        delete[] fullpathString.data;
        delete[] filenameString.data;
    } else {
        delete[] filenameString.data;
    }
    delete[] directoryString.data;

    return result;
} 

bool findTick(void* data0, void* data1){
    ApplicationLayoutData* applicationLayoutData = (ApplicationLayoutData*)data0;
    Panel* panel = &applicationLayoutData->panelGroup.panel;
    EditorWindow* currentWindow = applicationLayoutData->currentWindow;
    KeyboardManager* keyboardManager = (KeyboardManager*)data1;

    bool wasKeyTyped = panelDefaultTick(data0, data1);
    if(wasKeyTyped){
        findActionFromBeggining(data0);
    }
}

static inline i32 getQueryScore(String filename, Buffer<String> query){
    i32 result = 0;
    for(int i = 0; i < query.currentAmount; ++i){
        if(stringIsMatchingInWord(query[i], filename)){
            ++result;
        }
    }
    return result;
}

void bufferScoreSortAppend(Buffer<Suggestion>* buffer, Suggestion entry){
    bufferAppend<Suggestion>(buffer, entry);
    
    i32 offset = buffer->currentAmount - 1;

    if(offset - 1 < 0){
        return;
    }
    
    while(buffer->array[offset].score > buffer->array[offset - 1].score){
        Suggestion aux = buffer->array[offset];
        buffer->array[offset] = buffer->array[offset - 1];
        buffer->array[offset - 1] = aux;

        --offset;
        if(offset - 1 < 0){
            break;
        }
    }
}

Buffer<Suggestion> quickOpenFileGenerateSuggestions(ApplicationLayoutData* applicationLayoutData, GapBuffer* buffer){
    Buffer<Suggestion> result = {};

    String queryString = cloneString(gapToString(buffer));
    Buffer<String> queryWords = split(queryString, ' ');

    EditorFilePool* filePool = &applicationLayoutData->filePool;

    for(int i = 0; i < filePool->files.currentAmount; ++i){
        i32 score = getQueryScore(filePool->files[i].filename, queryWords);
        if(score){
            Suggestion s = {};
            s.name = cloneString(filePool->files[i].fullPath, filePool->files[i].fullPath.size);
            s.score = score;

            bufferScoreSortAppend(&result, s);
        }
    }

    return result;
}

bool quickOpenFileTick(void* data0, void* data1){
    ApplicationLayoutData* applicationLayoutData = (ApplicationLayoutData*)data0;
    Panel* panel = &applicationLayoutData->panelGroup.panel;
    EditorWindow* currentWindow = applicationLayoutData->currentWindow;
    KeyboardManager* keyboardManager = (KeyboardManager*)data1;

    bool wasKeyTyped = panelDefaultTick(data0, data1);
    if(wasKeyTyped){
        // TODO(Sarmis) the data generated by the dirent is not 
        // actually clean so do something about that...
        cleanSuggestionBuffer(panel->suggestions);
        panel->suggestions = quickOpenFileGenerateSuggestions(applicationLayoutData, &panel->buffer);
    } else if(keyboardManager->currentActiveKeyStroke & KEY_TAB){
        if(panel->suggestions.currentAmount >= 1){
            // not the best way, but I am too lazy to fix my gap buffer
            // to not need to remake the buffer for this...
            String suggestion = panel->suggestions[0].name;
            char* filename = gapToString(&panel->buffer);
            String filenameString = cloneString(filename);
            String directoryString;
            directoryString.data = NULL;

            u32 lastSlash = characterLastOccurence(filenameString, '/');
            if(lastSlash){
                ++lastSlash;
                directoryString = subString(filenameString, 0, lastSlash + 1);
            }

            gapClean(&panel->buffer);

            panel->buffer = gapCreateEmpty();
            if(directoryString.data){
                gapInsertNullTerminatedStringAt(&panel->buffer, (char*)directoryString.data, 0);
                gapSeekCursor(&panel->buffer, directoryString.size);

                gapInsertStringAt(&panel->buffer, suggestion, panel->buffer.cursor);
            } else {
                gapInsertStringAt(&panel->buffer, suggestion, 0);
            }
            gapSeekCursor(&panel->buffer, suggestion.size);
        }
    }
    
    
    return true;
}


bool openFileTick(void* data0, void* data1){
    ApplicationLayoutData* applicationLayoutData = (ApplicationLayoutData*)data0;
    Panel* panel = &applicationLayoutData->panelGroup.panel;
    EditorWindow* currentWindow = applicationLayoutData->currentWindow;
    KeyboardManager* keyboardManager = (KeyboardManager*)data1;

    bool wasKeyTyped = panelDefaultTick(data0, data1);
    if(wasKeyTyped){
        // TODO(Sarmis) the data generated by the dirent is not 
        // actually clean so do something about that...
        cleanSuggestionBuffer(panel->suggestions);
        panel->suggestions = openFilePanelGenerateSuggestions(&panel->buffer);
    } else if(keyboardManager->currentActiveKeyStroke & KEY_TAB){
        if(panel->suggestions.currentAmount >= 1){
            // not the best way, but I am too lazy to fix my gap buffer
            // to not need to remake the buffer for this...
            String suggestion = panel->suggestions[0].name;
            char* filename = gapToString(&panel->buffer);
            String filenameString = cloneString(filename);
            String directoryString;
            directoryString.data = NULL;

            u32 lastSlash = characterLastOccurence(filenameString, '/');
            if(lastSlash){
                ++lastSlash;
                directoryString = subString(filenameString, 0, lastSlash + 1);
            }

            gapClean(&panel->buffer);

            panel->buffer = gapCreateEmpty();
            if(directoryString.data){
                gapInsertNullTerminatedStringAt(&panel->buffer, (char*)directoryString.data, 0);
                gapSeekCursor(&panel->buffer, directoryString.size);

                gapInsertStringAt(&panel->buffer, suggestion, panel->buffer.cursor);
            } else {
                gapInsertStringAt(&panel->buffer, suggestion, 0);
            }
            gapSeekCursor(&panel->buffer, suggestion.size);
        }
    }
    
    
    return true;
}
