#pragma once

#include <unistd.h>
#include <dirent.h>
#include <string.h>

#include "general.h"

#include "panel.h"

#include "keyboard_manager.h"

bool stringIsPartiallyMatching(char* substring, char* string){
    while(*substring){
        if(*substring++ != *string++){
            return false;
        }
    }

    return true;
}

Buffer<char*> openFilePanelGenerateSuggestions(GapBuffer* buffer){
    // TODO(Sarmis) this is an allocation party
    // reusing buffers would've been much better
    Buffer<char*> result = {};

    char* filename = gapToString(buffer);

    String filenameString = cloneString(filename);
    String directoryString = cloneString(".");
    String fullpathString = filenameString;

    u32 lastSlash = characterLastOccurence(filenameString, '/');
    if(lastSlash){
        directoryString = subString(filenameString, 0, lastSlash);
        filenameString = subString(filenameString, lastSlash + 1, filenameString.size);
        fullpathString = directoryString + "/" + filenameString;
    }

    DIR* directory = opendir((char*)directoryString.data);
    if (directory) {
        struct dirent* directoryEntry;
        while ((directoryEntry = readdir(directory)) != NULL) {
            if(stringIsPartiallyMatching((char*)filenameString.data, directoryEntry->d_name)){
                
                if(strlen(directoryEntry->d_name) > 48){
                    directoryEntry->d_name[12] = 0;
                }

                // TODO(Sarmis) add Strings
                bufferAppend<char*>(&result, directoryEntry->d_name);
            }
        }
        closedir(directory);
    }

    if(filenameString.data != fullpathString.data){
        delete[] fullpathString.data;
        delete[] filenameString.data;
    } else {
        delete[] filenameString.data;
    }
    delete[] directoryString.data;

    return result;
} 

bool openFileTick(void* data0, void* data1, void* data2){
    Panel* panel = (Panel*)data0;
    KeyboardManager* keyboardManager = (KeyboardManager*)data2;

    bool wasKeyTyped = panelDefaultTick(data0, data1, data2);
    if(wasKeyTyped){
        // TODO(Sarmis) the data generated by the dirent is not 
        // actually clean so do something about that...
        bufferClean(&panel->suggestions);
        panel->suggestions = openFilePanelGenerateSuggestions(&panel->buffer);
    } else if(keyboardManager->currentActiveKeyStroke & KEY_TAB){
        if(panel->suggestions.currentAmount >= 1){
            // not the best way, but I am too lazy to fix my gap buffer
            // to not need to remake the buffer for this...
            char* suggestion = panel->suggestions.array[0];
            char* filename = gapToString(&panel->buffer);
            String filenameString = cloneString(filename);
            String directoryString;
            directoryString.data = NULL;

            u32 lastSlash = characterLastOccurence(filenameString, '/');
            if(lastSlash){
                directoryString = subString(filenameString, 0, lastSlash + 1);
            }

            gapClean(&panel->buffer);

            panel->buffer = gapCreateEmpty();
            if(directoryString.data){
                gapInsertNullTerminatedStringAt(&panel->buffer, (char*)directoryString.data, 0);
                gapSeekCursor(&panel->buffer, directoryString.size);

                gapInsertNullTerminatedStringAt(&panel->buffer, suggestion, panel->buffer.cursor);
            } else {
                gapInsertNullTerminatedStringAt(&panel->buffer, suggestion, 0);
            }
            gapSeekCursor(&panel->buffer, strlen(suggestion));
        }
    }
    
    
    return true;
}